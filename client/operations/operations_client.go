// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIUserapiSystemSmets2LiveDataSystemID(params *GetAPIUserapiSystemSmets2LiveDataSystemIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIUserapiSystemSmets2LiveDataSystemIDOK, error)

	GetAPIUserapiSystemSmets2PeriodicDataSystemID(params *GetAPIUserapiSystemSmets2PeriodicDataSystemIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIUserapiSystemSmets2PeriodicDataSystemIDOK, error)

	GetAPIUserapiV2UserDetailSystems(params *GetAPIUserapiV2UserDetailSystemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIUserapiV2UserDetailSystemsOK, error)

	GetEpochserviceV1SystemSystemIDReadings(params *GetEpochserviceV1SystemSystemIDReadingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpochserviceV1SystemSystemIDReadingsOK, error)

	PostUsersserviceV2Login(params *PostUsersserviceV2LoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUsersserviceV2LoginOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPIUserapiSystemSmets2LiveDataSystemID retrieves live energy data

Fetches real-time electricity and gas usage.
*/
func (a *Client) GetAPIUserapiSystemSmets2LiveDataSystemID(params *GetAPIUserapiSystemSmets2LiveDataSystemIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIUserapiSystemSmets2LiveDataSystemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIUserapiSystemSmets2LiveDataSystemIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIUserapiSystemSmets2LiveDataSystemID",
		Method:             "GET",
		PathPattern:        "/api/userapi/system/smets2-live-data/{systemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIUserapiSystemSmets2LiveDataSystemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIUserapiSystemSmets2LiveDataSystemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIUserapiSystemSmets2LiveDataSystemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIUserapiSystemSmets2PeriodicDataSystemID retrieves periodic energy data

Fetches historical electricity and gas usage data.
*/
func (a *Client) GetAPIUserapiSystemSmets2PeriodicDataSystemID(params *GetAPIUserapiSystemSmets2PeriodicDataSystemIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIUserapiSystemSmets2PeriodicDataSystemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIUserapiSystemSmets2PeriodicDataSystemIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIUserapiSystemSmets2PeriodicDataSystemID",
		Method:             "GET",
		PathPattern:        "/api/userapi/system/smets2-periodic-data/{systemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIUserapiSystemSmets2PeriodicDataSystemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIUserapiSystemSmets2PeriodicDataSystemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIUserapiSystemSmets2PeriodicDataSystemID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIUserapiV2UserDetailSystems retrieves user device details

Returns a list of systems associated with the authenticated user.
*/
func (a *Client) GetAPIUserapiV2UserDetailSystems(params *GetAPIUserapiV2UserDetailSystemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAPIUserapiV2UserDetailSystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIUserapiV2UserDetailSystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIUserapiV2UserDetailSystems",
		Method:             "GET",
		PathPattern:        "/api/userapi/v2/user/detail-systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIUserapiV2UserDetailSystemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIUserapiV2UserDetailSystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIUserapiV2UserDetailSystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEpochserviceV1SystemSystemIDReadings retrieves historical energy readings

Fetches historical energy consumption data for a given system within a date range.
*/
func (a *Client) GetEpochserviceV1SystemSystemIDReadings(params *GetEpochserviceV1SystemSystemIDReadingsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEpochserviceV1SystemSystemIDReadingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEpochserviceV1SystemSystemIDReadingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEpochserviceV1SystemSystemIDReadings",
		Method:             "GET",
		PathPattern:        "/epochservice/v1/system/{systemId}/readings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEpochserviceV1SystemSystemIDReadingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEpochserviceV1SystemSystemIDReadingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEpochserviceV1SystemSystemIDReadings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostUsersserviceV2Login authenticates user

Obtain an authentication token by providing user credentials.
*/
func (a *Client) PostUsersserviceV2Login(params *PostUsersserviceV2LoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostUsersserviceV2LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersserviceV2LoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostUsersserviceV2Login",
		Method:             "POST",
		PathPattern:        "/usersservice/v2/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersserviceV2LoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostUsersserviceV2LoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostUsersserviceV2Login: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
