// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAPIUserapiV2UserDetailSystemsReader is a Reader for the GetAPIUserapiV2UserDetailSystems structure.
type GetAPIUserapiV2UserDetailSystemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIUserapiV2UserDetailSystemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIUserapiV2UserDetailSystemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAPIUserapiV2UserDetailSystemsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAPIUserapiV2UserDetailSystemsOK creates a GetAPIUserapiV2UserDetailSystemsOK with default headers values
func NewGetAPIUserapiV2UserDetailSystemsOK() *GetAPIUserapiV2UserDetailSystemsOK {
	return &GetAPIUserapiV2UserDetailSystemsOK{}
}

/*
GetAPIUserapiV2UserDetailSystemsOK describes a response with status code 200, with default header values.

Device details retrieved
*/
type GetAPIUserapiV2UserDetailSystemsOK struct {
	Payload *GetAPIUserapiV2UserDetailSystemsOKBody
}

// IsSuccess returns true when this get Api userapi v2 user detail systems o k response has a 2xx status code
func (o *GetAPIUserapiV2UserDetailSystemsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api userapi v2 user detail systems o k response has a 3xx status code
func (o *GetAPIUserapiV2UserDetailSystemsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api userapi v2 user detail systems o k response has a 4xx status code
func (o *GetAPIUserapiV2UserDetailSystemsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api userapi v2 user detail systems o k response has a 5xx status code
func (o *GetAPIUserapiV2UserDetailSystemsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api userapi v2 user detail systems o k response a status code equal to that given
func (o *GetAPIUserapiV2UserDetailSystemsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api userapi v2 user detail systems o k response
func (o *GetAPIUserapiV2UserDetailSystemsOK) Code() int {
	return 200
}

func (o *GetAPIUserapiV2UserDetailSystemsOK) Error() string {
	return fmt.Sprintf("[GET /api/userapi/v2/user/detail-systems][%d] getApiUserapiV2UserDetailSystemsOK  %+v", 200, o.Payload)
}

func (o *GetAPIUserapiV2UserDetailSystemsOK) String() string {
	return fmt.Sprintf("[GET /api/userapi/v2/user/detail-systems][%d] getApiUserapiV2UserDetailSystemsOK  %+v", 200, o.Payload)
}

func (o *GetAPIUserapiV2UserDetailSystemsOK) GetPayload() *GetAPIUserapiV2UserDetailSystemsOKBody {
	return o.Payload
}

func (o *GetAPIUserapiV2UserDetailSystemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAPIUserapiV2UserDetailSystemsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIUserapiV2UserDetailSystemsUnauthorized creates a GetAPIUserapiV2UserDetailSystemsUnauthorized with default headers values
func NewGetAPIUserapiV2UserDetailSystemsUnauthorized() *GetAPIUserapiV2UserDetailSystemsUnauthorized {
	return &GetAPIUserapiV2UserDetailSystemsUnauthorized{}
}

/*
GetAPIUserapiV2UserDetailSystemsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAPIUserapiV2UserDetailSystemsUnauthorized struct {
}

// IsSuccess returns true when this get Api userapi v2 user detail systems unauthorized response has a 2xx status code
func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api userapi v2 user detail systems unauthorized response has a 3xx status code
func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api userapi v2 user detail systems unauthorized response has a 4xx status code
func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api userapi v2 user detail systems unauthorized response has a 5xx status code
func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api userapi v2 user detail systems unauthorized response a status code equal to that given
func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get Api userapi v2 user detail systems unauthorized response
func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) Code() int {
	return 401
}

func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/userapi/v2/user/detail-systems][%d] getApiUserapiV2UserDetailSystemsUnauthorized ", 401)
}

func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/userapi/v2/user/detail-systems][%d] getApiUserapiV2UserDetailSystemsUnauthorized ", 401)
}

func (o *GetAPIUserapiV2UserDetailSystemsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetAPIUserapiV2UserDetailSystemsOKBody get API userapi v2 user detail systems o k body
swagger:model GetAPIUserapiV2UserDetailSystemsOKBody
*/
type GetAPIUserapiV2UserDetailSystemsOKBody struct {

	// system details
	SystemDetails []*GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0 `json:"systemDetails"`

	// system roles
	SystemRoles []*GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0 `json:"systemRoles"`
}

// Validate validates this get API userapi v2 user detail systems o k body
func (o *GetAPIUserapiV2UserDetailSystemsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSystemDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSystemRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBody) validateSystemDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.SystemDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.SystemDetails); i++ {
		if swag.IsZero(o.SystemDetails[i]) { // not required
			continue
		}

		if o.SystemDetails[i] != nil {
			if err := o.SystemDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBody) validateSystemRoles(formats strfmt.Registry) error {
	if swag.IsZero(o.SystemRoles) { // not required
		return nil
	}

	for i := 0; i < len(o.SystemRoles); i++ {
		if swag.IsZero(o.SystemRoles[i]) { // not required
			continue
		}

		if o.SystemRoles[i] != nil {
			if err := o.SystemRoles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get API userapi v2 user detail systems o k body based on the context it is used
func (o *GetAPIUserapiV2UserDetailSystemsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSystemDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSystemRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBody) contextValidateSystemDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SystemDetails); i++ {

		if o.SystemDetails[i] != nil {
			if err := o.SystemDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBody) contextValidateSystemRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SystemRoles); i++ {

		if o.SystemRoles[i] != nil {
			if err := o.SystemRoles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemRoles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getApiUserapiV2UserDetailSystemsOK" + "." + "systemRoles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAPIUserapiV2UserDetailSystemsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0 get API userapi v2 user detail systems o k body system details items0
swagger:model GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0
*/
type GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0 struct {

	// devices
	Devices []*GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0 `json:"devices"`

	// name
	Name string `json:"name,omitempty"`

	// system Id
	SystemID string `json:"systemId,omitempty"`
}

// Validate validates this get API userapi v2 user detail systems o k body system details items0
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(o.Devices) { // not required
		return nil
	}

	for i := 0; i < len(o.Devices); i++ {
		if swag.IsZero(o.Devices[i]) { // not required
			continue
		}

		if o.Devices[i] != nil {
			if err := o.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get API userapi v2 user detail systems o k body system details items0 based on the context it is used
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Devices); i++ {

		if o.Devices[i] != nil {
			if err := o.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0 get API userapi v2 user detail systems o k body system details items0 devices items0
swagger:model GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0
*/
type GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0 struct {

	// device type
	DeviceType string `json:"deviceType,omitempty"`

	// node Id
	NodeID int64 `json:"nodeId,omitempty"`

	// paired timestamp
	PairedTimestamp int64 `json:"pairedTimestamp,omitempty"`

	// pairing code
	PairingCode string `json:"pairingCode,omitempty"`

	// sensor type
	SensorType int64 `json:"sensorType,omitempty"`

	// upgrade required
	UpgradeRequired bool `json:"upgradeRequired,omitempty"`

	// version number
	VersionNumber *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber `json:"versionNumber,omitempty"`
}

// Validate validates this get API userapi v2 user detail systems o k body system details items0 devices items0
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVersionNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0) validateVersionNumber(formats strfmt.Registry) error {
	if swag.IsZero(o.VersionNumber) { // not required
		return nil
	}

	if o.VersionNumber != nil {
		if err := o.VersionNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionNumber")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get API userapi v2 user detail systems o k body system details items0 devices items0 based on the context it is used
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVersionNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0) contextValidateVersionNumber(ctx context.Context, formats strfmt.Registry) error {

	if o.VersionNumber != nil {
		if err := o.VersionNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionNumber")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0) UnmarshalBinary(b []byte) error {
	var res GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber get API userapi v2 user detail systems o k body system details items0 devices items0 version number
swagger:model GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber
*/
type GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber struct {

	// major
	Major int64 `json:"major,omitempty"`

	// minor
	Minor int64 `json:"minor,omitempty"`
}

// Validate validates this get API userapi v2 user detail systems o k body system details items0 devices items0 version number
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get API userapi v2 user detail systems o k body system details items0 devices items0 version number based on context it is used
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber) UnmarshalBinary(b []byte) error {
	var res GetAPIUserapiV2UserDetailSystemsOKBodySystemDetailsItems0DevicesItems0VersionNumber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0 get API userapi v2 user detail systems o k body system roles items0
swagger:model GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0
*/
type GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// system Id
	SystemID string `json:"systemId,omitempty"`
}

// Validate validates this get API userapi v2 user detail systems o k body system roles items0
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get API userapi v2 user detail systems o k body system roles items0 based on context it is used
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0) UnmarshalBinary(b []byte) error {
	var res GetAPIUserapiV2UserDetailSystemsOKBodySystemRolesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
