// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEpochserviceV1SystemSystemIDReadingsReader is a Reader for the GetEpochserviceV1SystemSystemIDReadings structure.
type GetEpochserviceV1SystemSystemIDReadingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEpochserviceV1SystemSystemIDReadingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEpochserviceV1SystemSystemIDReadingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEpochserviceV1SystemSystemIDReadingsOK creates a GetEpochserviceV1SystemSystemIDReadingsOK with default headers values
func NewGetEpochserviceV1SystemSystemIDReadingsOK() *GetEpochserviceV1SystemSystemIDReadingsOK {
	return &GetEpochserviceV1SystemSystemIDReadingsOK{}
}

/*
GetEpochserviceV1SystemSystemIDReadingsOK describes a response with status code 200, with default header values.

Successful retrieval of energy readings.
*/
type GetEpochserviceV1SystemSystemIDReadingsOK struct {
	Payload []*GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0
}

// IsSuccess returns true when this get epochservice v1 system system Id readings o k response has a 2xx status code
func (o *GetEpochserviceV1SystemSystemIDReadingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get epochservice v1 system system Id readings o k response has a 3xx status code
func (o *GetEpochserviceV1SystemSystemIDReadingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get epochservice v1 system system Id readings o k response has a 4xx status code
func (o *GetEpochserviceV1SystemSystemIDReadingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get epochservice v1 system system Id readings o k response has a 5xx status code
func (o *GetEpochserviceV1SystemSystemIDReadingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get epochservice v1 system system Id readings o k response a status code equal to that given
func (o *GetEpochserviceV1SystemSystemIDReadingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get epochservice v1 system system Id readings o k response
func (o *GetEpochserviceV1SystemSystemIDReadingsOK) Code() int {
	return 200
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOK) Error() string {
	return fmt.Sprintf("[GET /epochservice/v1/system/{systemId}/readings][%d] getEpochserviceV1SystemSystemIdReadingsOK  %+v", 200, o.Payload)
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOK) String() string {
	return fmt.Sprintf("[GET /epochservice/v1/system/{systemId}/readings][%d] getEpochserviceV1SystemSystemIdReadingsOK  %+v", 200, o.Payload)
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOK) GetPayload() []*GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0 {
	return o.Payload
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0 get epochservice v1 system system ID readings o k body items0
swagger:model GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0
*/
type GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0 struct {

	// readings
	Readings []*GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0 `json:"readings"`

	// start timestamp
	StartTimestamp float64 `json:"startTimestamp,omitempty"`

	// system UUID
	SystemUUID string `json:"systemUUID,omitempty"`
}

// Validate validates this get epochservice v1 system system ID readings o k body items0
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReadings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0) validateReadings(formats strfmt.Registry) error {
	if swag.IsZero(o.Readings) { // not required
		return nil
	}

	for i := 0; i < len(o.Readings); i++ {
		if swag.IsZero(o.Readings[i]) { // not required
			continue
		}

		if o.Readings[i] != nil {
			if err := o.Readings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get epochservice v1 system system ID readings o k body items0 based on the context it is used
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateReadings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0) contextValidateReadings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Readings); i++ {

		if o.Readings[i] != nil {
			if err := o.Readings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("readings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("readings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0 get epochservice v1 system system ID readings o k body items0 readings items0
swagger:model GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0
*/
type GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0 struct {

	// duration
	Duration int64 `json:"duration,omitempty"`

	// energy type
	// Enum: [IMPORT GAS_ENERGY]
	EnergyType string `json:"energyType,omitempty"`

	// energy watt hours
	EnergyWattHours int64 `json:"energyWattHours,omitempty"`

	// milli pence cost
	MilliPenceCost int64 `json:"milliPenceCost,omitempty"`

	// tier type
	TierType string `json:"tierType,omitempty"`
}

// Validate validates this get epochservice v1 system system ID readings o k body items0 readings items0
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnergyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getEpochserviceV1SystemSystemIdReadingsOKBodyItems0ReadingsItems0TypeEnergyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IMPORT","GAS_ENERGY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getEpochserviceV1SystemSystemIdReadingsOKBodyItems0ReadingsItems0TypeEnergyTypePropEnum = append(getEpochserviceV1SystemSystemIdReadingsOKBodyItems0ReadingsItems0TypeEnergyTypePropEnum, v)
	}
}

const (

	// GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0EnergyTypeIMPORT captures enum value "IMPORT"
	GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0EnergyTypeIMPORT string = "IMPORT"

	// GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0EnergyTypeGASENERGY captures enum value "GAS_ENERGY"
	GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0EnergyTypeGASENERGY string = "GAS_ENERGY"
)

// prop value enum
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0) validateEnergyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getEpochserviceV1SystemSystemIdReadingsOKBodyItems0ReadingsItems0TypeEnergyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0) validateEnergyType(formats strfmt.Registry) error {
	if swag.IsZero(o.EnergyType) { // not required
		return nil
	}

	// value enum
	if err := o.validateEnergyTypeEnum("energyType", "body", o.EnergyType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get epochservice v1 system system ID readings o k body items0 readings items0 based on context it is used
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0) UnmarshalBinary(b []byte) error {
	var res GetEpochserviceV1SystemSystemIDReadingsOKBodyItems0ReadingsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
